<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.gdu</groupId>
	<artifactId>app01</artifactId>
	<name>01_ioc_Container</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	
	<!-- 
		Maven 프로젝트
		
		mvnrepository.com(중앙저장소, central)에 필요한 jar를 보관해 두고
		pom.xml 파일에 디펜던시를 추가하면 해당 jar를 다운로드 하는 프로젝트
	-->
	
	<!--  
		pom.xml을 자주 저장하면 자주 다운로드를 진행하기 때문에 오류 확률이 높아진다.
		pom.xml 파일을 저장한 뒤에는 다운로드가 완료될 때까지 기다려야 한다.
		pom.xml 파일의 변경 사항이 반영되지 않으면 [Maven] - [Update Project] 실행해야 한다.    -> 간소화 시켜놓은게 boot임
		(그래서 쓸 디펜던시 다 추가한 후에 마지막에 한번 저장 권장)
	-->
	
	<!-- 
		다운로드 된 jar 파일은 c:\Users\계정명\.m2 디렉터리에 저장된다.
		jar에 문제가 발생한 경우,
		  1) STS를 끄고, (sts가 jar를 쓰고 있기 때문에 켜져 있으면 지워지지 않음)
		  2) 이 디렉터리에 저장된 모든 jar를 다 지우고
		  3) STS를 다시 켠다. (한참 기다려야 한다. 다시 처음부터 죄다 다운로드 받아오려면 시간이 걸림..)
		▼
		왜 디펜던시라고 말할까?   왤까?이유가 몰까? 왜그럴까
		dependency.라는건 특정 jar파일이 있다 하나만 있으면 실행되는 경우도 있지만 이 jar파일을 실행하기 위해서 또다른 jar파일이 필요한 경우, 
		즉 파일끼리 종속관계가 있는 경우가 있기 때문에 문제가 생긴 jar파일만 지우는 건 힘들다. 
		의존관계에 있는 모든 jar를 받아다 준다. 그래서 일부 자르만 제거하고 다시받ㄴ든건 좋은 생각이 아님. 다 지우자!	
	-->
	
	<!-- 
		properties  태그에 작성해둔 버전은 모두 ${}, 즉 EL로 사용 가능하다.
		${java-version}                -> 11로 치환
		${org.springframework-version} -> 5.3.3으로 치환
		${org.aspectj-version}         -> 1.9.6으로 치환
		${org.slf4j-version}           -> 1.7.30으로 치환
	-->
	
	<properties>
		<java-version>11</java-version>
		<org.springframework-version>5.3.3</org.springframework-version>
		<org.aspectj-version>1.9.6</org.aspectj-version>
		<org.slf4j-version>1.7.30</org.slf4j-version>
	</properties>


	<!--  
		디펜던시
		
		의존 관계를 파악해서 필요한 jar를 모두 받아 주기 때문에 dependency라고 한다.
		한마디로 디펜던시는 jar이다.
	-->
	
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<!-- servlet의 artifactId와 version 수정 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<!-- JUnit5는 JUnit Jupiter라고 하고, 5버전 쓰려면 디펜던시를 통째로 바꿔야 한다. -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>        
	</dependencies>
	
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            
            <!-- source, target을 ${java-version}으로 변경 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>${java-version}</source>
                    <target>${java-version}</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
