<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.app13.mapper.UserMapper">

	<!-- 아이디 중복체크1, 이메일 중복체크, 로그인, 로그인 유지를 이용한 로그인, 마이페이지(check) 가기 전 비번 확인 -->
	<select id="selectUserByMap" parameterType="Map" resultType="UserDTO">
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		<where>
			<if test="id != null">
				ID = #{id}
			</if>
			<if test="pw != null">
				AND PW = #{pw}
			</if>
			<if test="email != null">
				AND EMAIL = #{email}
			</if>
			<if test="sessionId != null">
				AND SESSION_ID = #{sessionId}
				AND SESSION_LIMIT_DATE > SYSDATE
				<!-- 세션 유지 시간 남았는지 비교.  SESSION_LIMIT_DATE가 오늘보다 크냐~ -->
			</if>
		</where>
	</select>
<!--

	  ▲ 아래 3개의 쿼리문을 하나로 모아서 selectUserByMap로 묶고, 받아오는 파라미터의 타입은 Map으로 설정, 반환 타입은 동일하게 UserDTO
	  	WHERE절은 <where>과 <if>를 사용해서 한번에 처리.
	  
	   * WHERE 이랑 <where>의 차이!!!
		WHERE절에 id, pw가 null이고 email이 null이 아닌 상황에서는, WHERE 바로 뒤에 AND가 나와버리게 되는데 그렇게 되면 쿼리 문법오류 발생!
 		 	=>   WHERE and email = #{email}                                      [X]
 			=>  <where> <if test="email != null"> AND EMAIL = #{email} </if>     [O]  
    			   └▶ <where> 태그가 AND나 OR로 시작하는걸 알아서 제거하고 쿼리문 실행해줌!!  
    			   

	* 아이디 중복체크 
	<select id="selectUserById" parameterType="String" resultType="UserDTO">      // id 하나 넘어오는거니까 파라미터타입 String 
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		 WHERE ID = #{id}
	</select>
	
	* 이메일 중복체크
	<select id="selectUserByEmail" parameterType="String" resultType="UserDTO">  // email 하나 넘기는거니까 파라미터타입 String 
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		 WHERE EMAIL = #{email}
	</select>
	
	* 로그인 : 받아오는 파라미터는 Map 혹은 UserDTO 두가지 중 하나, 반환하는 타입 UserDTO
	<select id="selectUserByIdPw" parameterType="UserDTO" resultType="UserDTO">
		SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE
		  FROM USERS
		 WHERE ID = #{id}
		   AND PW = #{pw}
	</select>
	
 -->
	
	<select id="selectRetireUserById" parameterType="String" resultType="RetireUserDTO">
		SELECT ID
		  FROM RETIRE_USERS
		 WHERE ID = #{id}
	</select>
	
	<!-- 일반회원가입 -->
	<insert id="insertUser" parameterType="UserDTO">
		  INSERT INTO USERS
         (USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, PW_MODIFY_DATE, INFO_MODIFY_DATE, SESSION_ID, SESSION_LIMIT_DATE)
      VALUES
         (USERS_SEQ.NEXTVAL, #{id}, #{pw}, #{name}, #{gender}, #{email}, #{mobile}, #{birthyear}, #{birthday}, #{postcode}, #{roadAddress}, #{jibunAddress}, #{detailAddress}, #{extraAddress}, #{agreeCode}, NULL, SYSDATE, SYSDATE, SYSDATE, NULL, NULL)
	</insert>
	
	<!-- 로그인 기록(ACCESS_LOG) 넘기기 : id로만 업데이트 가능!(따라서 파라미터타입 : String or UserDTO) -->
	<update id="updateAccessLog" parameterType="String">
		UPDATE ACCESS_LOG
		   SET LAST_LOGIN_DATE = SYSDATE
		 WHERE ID = #{id}
	</update>
	<insert id="insertAccessLog" parameterType="String">
		INSERT INTO ACCESS_LOG
			(ACCESS_LOG_NO, ID, LAST_LOGIN_DATE)
		VALUES
			(ACCESS_LOG_SEQ.NEXTVAL, #{id}, SYSDATE)
	</insert>
	
	<!-- 회원탈퇴1 : USERS 테이블에서 제거 (user_no로 제거) -->
	<delete id="deleteUser" parameterType="int">
		DELETE
		  FROM USERS
		 WHERE USER_NO = #{userNo}
	</delete>
	
	<!-- 회원탈퇴2 : RETIRE_USERS 테이블에 추가 -->
	<insert id="insertRetireUser" parameterType="RetireUserDTO">
		INSERT INTO RETIRE_USERS
			(USER_NO, ID, JOIN_DATE, RETIRE_DATE)
		VALUES
			(#{userNo}, #{id}, #{joinDate}, SYSDATE)
	</insert>
	
	<!-- 로그인 유지를 위한 SESSION_ID/SESSION_LIMIT_DATE 업데이트 -->
	<update id="updateSessionInfo" parameterType="UserDTO">
		UPDATE USERS
		   SET SESSION_ID = #{sessionId}
		   	 , SESSION_LIMIT_DATE = #{sessionLimitDate}
		 WHERE ID = #{id}
	</update>
	
	<!-- 마이페이지 : 비밀번호 수정 -->
	<!-- parameterType="UserDTO" 에는 userNo와 pw가 담겨져 있어야 한다! -->
	<update id="updateUserPassword" parameterType="UserDTO">
		UPDATE USERS
		   SET PW = #{pw}
		     , PW_MODIFY_DATE = SYSDATE
		 WHERE USER_NO = #{userNo}
	</update>
	
 <!-- 휴면처리 1 : 1년 이상 로그인 기록이 없으면 휴면 테이블에 저장 -->
   <insert id="insertSleepUser"> <!-- 입력받는 조건이 없어서 파라미터가 없음 -->
      INSERT INTO SLEEP_USERS(USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE, LAST_LOGIN_DATE, SLEEP_DATE)      
         (SELECT U.USER_NO, U.ID, U.PW, U.NAME, U.GENDER, U.EMAIL, U.MOBILE, U.BIRTHYEAR, U.BIRTHDAY, U.POSTCODE, U.ROAD_ADDRESS, U.JIBUN_ADDRESS, U.DETAIL_ADDRESS, U.EXTRA_ADDRESS, U.AGREE_CODE, U.SNS_TYPE, U.JOIN_DATE, A.LAST_LOGIN_DATE, TO_CHAR(SYSDATE, 'YYYY-MM-DD')
             FROM USERS U LEFT OUTER JOIN ACCESS_LOG A
              ON U.ID = A.ID
            WHERE MONTHS_BETWEEN(SYSDATE, A.LAST_LOGIN_DATE) >= 12
                OR (MONTHS_BETWEEN(SYSDATE, U.JOIN_DATE) >=12 AND A.LAST_LOGIN_DATE IS NULL))
   </insert>
   
   <!-- 휴면처리 2 : 1년 이상 로그인 기록이 없으면 회원테이블에서 삭제 -->
   <delete id="deleteUserForSleep">
      DELETE 
          FROM USERS
        WHERE ID IN (SELECT U.ID
                        FROM USERS U LEFT OUTER JOIN ACCESS_LOG A
                          ON U.ID = A.ID
                       WHERE MONTHS_BETWEEN(SYSDATE, A.LAST_LOGIN_DATE) >= 12
                          OR (MONTHS_BETWEEN(SYSDATE, U.JOIN_DATE) >=12 AND A.LAST_LOGIN_DATE IS NULL))
   </delete>
	
	<!-- 로그인 이전에 휴면회원인지 확인 -->
	<select id="selectSleepUserId" parameterType="String" resultType="SleepUserDTO">
		SELECT ID, JOIN_DATE, LAST_LOGIN_DATE, SLEEP_DATE
		  FROM SLEEP_USERS
		 WHERE ID = #{id}
	</select>
	
	<!-- 휴면복원 1 : 복원할 회원을 USERS 테이블에 삽입, 파라미터로 전달받는게 id -> 따라서 타입은 String -->
	<insert id="insertRestoreUser" parameterType="String">
		INSERT INTO USERS(USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE)
			(SELECT USER_NO, ID, PW, NAME, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, JOIN_DATE
			   FROM SLEEP_USERS
			  WHERE ID = #{id})
		
	</insert>
	
	<!-- 휴면복원 2 : 복원할 회원을 SLEEP_USERS 테이블에서 삭제 -->
	<delete id="deleteSleepUser" parameterType="String">
		DELETE
		  FROM SLEEP_USERS
		 WHERE ID = #{ID}
	</delete>	
</mapper>