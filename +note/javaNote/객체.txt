* 객체지향


class Ex5 {
 
     Tv t;                                 // Tv인스턴스를 참조하기 위한 참조변수 t 선언
     t = new Tv( );                 // Tv인스턴스 생성(객체 생성)
     t.channel = 7;                // Tv객체의 멤버 변수 channel의 값을 7로 한다.
     t.channelDouwn( );      // Tv객체의 메소드 호출
}




 1. 클래스 작성                                      -- 클래스를 설계도라고 보면 됨
class Tv {   
        (변수 - 속성)
        Sting color;
        boolean power;
        int channel;
 
   (메소드 - 기능)    
    void power( ) {
                 power = !power; }
    void channelUp( ) {
                 channel ++; }
    void channelDown( ) {
                 channel --; }
                                                        ---------> Tv 객체는 3개의 변수와 3개의 메소드로 구성
 
 Tv t;    - Tv클래스 타입의 참조변수 t 선언. Tv는 string, int, double 같은 기본형 타입이 아닌 참조타입
            - t는 Tv 리모콘. Tv객체를 사용하기 위한 참조변수
 t = new Tv( );       - Tv객체를 생성하고 생성된 Tv객체(인스턴스)의 주소를 t에 저장 
                             - Tv객체는 Tv 리모콘을 통해서만 접근 가능. 참조변수(t)가 없으면 객체(new ();)를 사용할 수 없다.
                             - Tv객체니까 Tv리모콘이 필요. 그래서 참조변수의 타입이 Tv인 것.
                              ** 리모콘(t) 타입하고 생성하려는 객체 타입(new ();)은 일치해야 된다 (Tv라는 참조타입)
2. 객체 생성
Tv t = new Tv( ); 

}

 3. 객체의 사용
t = 참조변수   (리모콘) 
new Tv( ) = 객체   (Tv 객체 생성)
객체를 다루려면 참조변수가 필요.
참조변수를 만들어주고 객체를 생성,
대입 연산자로 객체와 참조변수를 연결
참조변수를 선언해주고 객체를 생성한 후 그 둘을 연결.

Tv t = new Tv( );
새로운 티비 하나를 만들어서 리모콘과 연결

// 객체를 사용한다  -> 객체가 가진 변수와 메소드 사용한다(참조변수를 통해 접근)
t.channel = 7;          - 참조변수 t가 가리키는 객체의 변수 channel에 7을 저장(변수 사용)
t.channelDown( );    - 참조변수 t가 가리키는 객체의 channelDown이라는 메소드를 호출(메소드 사용)
system.out.println("현재 채널은 " + t.channel + "번 입니다");
    => 현재 채널은 6번 입니다.


Tv t1 = new Tv( );
Tv t2 = new Tv( );
t1.channel = 7;      >> 참조변수 t1이 가리키는 객체의 channel 값이 7,
t2..channel = 3;      >> 참조변수 t2가 가리키는 객체의 channel 값이 3,

객체를 만들 때마다 Tv 클래스에 정의된 변수들이 계속 만들어진다. 객체마다 별도의 저장공간이 생김!
각 변수는 어느 한 쪽을 바꾼다 해서 영향을 받지 않음. 이름만 똑같지 같은 변수가 아니다!
t1.channer =\= t2.channel    -> t1과 t2의 주소는 다름.

system.out.println("현재 채널은 " + t1.channel + "번 입니다");             7번입니다
system.out.println("현재 채널은 " + t2.channel + "번 입니다");             3번입니다

-----------------

t1= t2;   -> t1이 가리키는 객체와 같은 주소를 가지게 됨. 즉 t2도 같은 객체를 가리키게 된다. (주소값만 같으면 여러 개의 참조변수로 하나의 객체(인스턴스) 사용 가능)
                  그럼 본래 t2가 가리키던 객체와 t2라는 리모콘(참조변수)의 연결이 끊어지게 되면서 해당 객체는 사용이 불가해짐. 가비지컬렉터행~
                  사용되지 않는 객체 알아서 처리해줌으로서 메모리가 불필요하게 낭비되는 것을 막아준다.

system.out.println("현재 채널은 " + t1.channel + "번 입니다");             7번입니다
system.out.println("현재 채널은 " + t2.channel + "번 입니다");             7번입니다

반대로 하나의 참조변수로 2개 이상의 객체(인스턴스)를 가리키는 것은 불가!  -> 참조변수는 하나의 값만 저장 가능하기 때문에.


<<<클래스가 2개 있는 경우, 메인 메소드가 있는 클래스의 이름을 소스파일 이름으로 해야 이클립스가 실행을 제대로 한다!!!!!>>>



// 선언 위치에 따른 변수의 종류 ( 클래스영역/ 메소드영역 )
class Variables {       # 클래스 영역 ( 선언문만 가능 )
       (변수 선언) 
      int iv;                 // 인스턴스 변수  -> 클래스 영역에서 선언되면 기본적으로 인스턴스 변수. *인스턴스(객체)가 생성되면 만들어지는 변수. 객체 생성 해야 사용 가능!
                                                                  ** 즉, 인스턴스 변수를 n개 묶어놓은 것이 객체라고 보면 된다.  (iv는 참조변수가 없어지면 가비지컬렉터에 의해 사라진다)
      static int cv;      // 클래스 변수 - > 클래스 영역에 있는 변수(static변수, 공유변수).       (인스턴스 변수에 static이 붇는 경우)  
                                   -> 클래스가 메모리에 올라갈 때 생성됨. 객체 생성 안해도 된다. 필요없음
                                  객체를 만들기 전에 설계도가 메모리에 먼저 올라가야 설계도를 보고 객체를 만들 수 있다. 객체 생성 필요없음 -> 아무때나 사용 가능

     void method( ) {    # 메소드 영역
        (메소드 선언)
         int lv = 0;      // 메소드 영역에 있는 변수(지역변수)   -> 변수 선언문이 수행 되었을 때 생성됨. 메소드가 끝날 때까지 유효. 메소드가 종료 시 자동 제거.
     }
 }


// 클래스 변수와 인스턴스 변수
카드 객체가 여러 개 있다. 
각각 무늬, 숫자는 개별적으로 가지는 속성(객체마다 다르게 유지되어야 함),  가로세로 길이는 공통적으로 가지는 속성(객체마다 다르게 유지되어야 함)을 가진다.
개별 속성은 인스턴스 변수, 공통 속성은 클래스 변수로 둔다.

class Card {
       string kind;    // 무늬
       int number;   // 숫자        
       ------------------------------ ^ 인스턴스 변수
       static int width = 100;     // 가로
       static int height = 250;   // 세로   (각각의 숫자로 초기화)
       ------------------------------ ^ 클래스 변수
 }

클래스 사용하기

class Ex5_1 {
    public static void main(String args[] {


            Card.width = 100;               - 클래스 변수는 참조변수보단 클래스이름을 붙여 변수를 사용하는 것을 권장. ( 참조변수로도 가능은 함. c.width )
            Card.height = 250;                        ->> 클래스 변수이므로 객체 생성 필요 없음 --> 클래스 이름의 Card이다.


            Card c1 = new Card( );          - 객체 생성
            c1.kind = "clover";                 - 참조변수로 접근해서 객체 사용, 인스턴스 변수들 ==> 객체를 만들 때마다 생긴다.
            c1.number = "5";

            Card c2 = new Card( );          - 객체 생성
            c2.kind = "spade";                 - 참조변수로 접근해서 객체 사용, 인스턴스 변수들 ==> 객체를 만들 때마다 생긴다.
            c2.number = "2";

            system.out.println("c1은 " + c1.kind + ", " + c1.number + "이며 크기는 각각 " +  c1.width + ", " + c1.height + "입니다");   c1은 clover, 5이며 크기는 각각 100, 250입니다.
            system.out.println("c2은 " + c2.kind + ", " + c2.number + "이며 크기는 각각 " +  c2.width + ", " + c2.height + "입니다");   c2는 spade, 2이며 크기는 각각 100, 250입니다.

            --- c1의 가로세로 길이를 아래와 같이 바꾸겠다. 
            c1.width = 50;
            c1.height = 80;       -> 클래스 변수이기 때문에 Card.width = 50;/Card.height = 80; 처럼 쓰는 것이 좋다.


            system.out.println("c1의 크기는 각각 " +  c1.width + ", " + c1.height + "입니다");   c1의 크기는 각각 50, 80입니다.
            system.out.println("c1의 크기는 각각 " +  c1.width + ", " + c1.height + "입니다");   c1의 크기는 각각 50, 80입니다.
                -> width와 height는 생성된 객체들의 공통 속성의 클래스변수(stactic변수, 공유변수)이기 때문에 c1의 값만 바뀌는게 아니라 c2의 값도 바뀐다.
    }
}
