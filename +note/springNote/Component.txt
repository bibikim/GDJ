07_Dbcp

// 7장에 @Repository, @Service, @Autowired 모두 주석 후 공부
// 컴포넌트 처리없이 bean 생성하고 가져오기!


* @Repository/@Service 컴포넌트 없이 bean 만들기
BoardServiceImpl 에서 컨테이너의 BoardDAO를 가져와서 사용하겠다 (->컨테이너에 있는거 가져오세요!)
@Repository(컴포넌트)를 하지 않으면 private BoardDAO dao; 에서부터 오류가 난다. 컨테이너에 bean이 만들어져있지 않으니까.

-->  Error creating bean with name 'boardController';
      Error creating bean with name 'boardServiceImpl': Unsatisfied dependency expressed through field 'dao';
=> 오토와이어드 대상은 컨테이너에 있어야만 한다

  해결방법 : 자바클래스 하나 열고 @Configuration(이 클래스가 bean을 만들 수 있게 해줌)
               DAO의 bean과 BoardServie의 bean을 @Bean으로 만들어준다



* @Autowired 컴포넌트 없이 bean 불러오기
@autowired 를 주석처리하면 뜨는 오류  (@Autowired의 역할: 컨테이너에서 찾아와서 집어넣어라)
dao를 사용하려 할 때(DB를 접속해야할 때) 오류가 뿜어져 나옴. 왜?
private BoardDAO dao; 이렇게 필드만 선언된 상태. 필드를 선언만 하면 필드의 기본값은 null.
 -> 그래서 NullPointerException이 뜸 

  해결방법 : genBean(); 사용
AbstractApplicationContext ctx = new AnnotationConfigApplicationContext(BoardAppContext.class);
private BoardDAO dao;

dao = ctx.getBean("dao", BoardDAO.class);   ==> 각 메소드 마다 return 전에 넣어줘야 함. 이 얼마나 귀찮은가,,
	       // ("가져올 빈의 이름 = 메소드의 이름", 타입)

  --> 지워주고! 다오만 선언한 상태에서
 @AllArgsConstructor 만 넣어준 상태에서 다시 시작!


보드서비스 임플은 생성자가 동작할 때 다오를 받아온다.
그래서 다오를 만들어주는 메소드를 호출해서 다오 생성자에(bean 아래) dao()를 넣어주는 것

컨트롤러/서비스임플에 autowired를 없애고 대신 생성자(@AllArgsConstructor)를 만들어 두면!!!
생성자를 이용한 bean을 가져오는 방법이 가능해진다! 그래서 필드에 선언한 것이 널이 뜨지 않는다잉

